include <lib.scad>
pcb_height = 1.6;
pcb_height = 1.60000;
module pcb(){
   difference(){
      color("green") linear_extrude(height = 1.60000, convexity = 10, twist = 0) polygon( points=[
         [99.00000, -49.75000], 
         [98.00000, -50.75000], 
         [98.00000, -90.00000], 
         [99.00000, -91.00000], 
         [102.25000, -91.00000], 
         [103.75000, -92.50000], 
         [103.75000, -95.50000], 
         [104.75000, -96.50000], 
         [107.50000, -96.50000], 
         [109.00000, -98.00000], 
         [109.00000, -100.50000], 
         [110.00000, -101.50000], 
         [111.00000, -101.50000], 
         [111.00000, -104.50000], 
         [110.00000, -105.50000], 
         [110.00000, -148.75000], 
         [111.00000, -149.75000], 
         [197.00000, -149.75000], 
         [198.00000, -148.75000], 
         [198.00000, -106.00000], 
         [197.00000, -105.00000], 
         [185.50000, -105.00000], 
         [185.50000, -102.00000], 
         [197.00000, -102.00000], 
         [198.00000, -101.00000], 
         [198.00000, -50.75000], 
         [197.00000, -49.75000], 
         [99.00000, -49.75000], 
      ]);
      color("green") translate([0, 0, -0.1]) linear_extrude(height = 1.60000 + 0.2, convexity = 10, twist = 0) polygon( points=[
         [115.50000, -104.50000], 
         [115.50000, -101.50000], 
         [127.50000, -101.50000], 
         [128.50000, -100.50000], 
         [128.50000, -100.00000], 
         [129.50000, -99.00000], 
         [133.50000, -99.00000], 
         [134.50000, -100.00000], 
         [134.50000, -100.50000], 
         [135.50000, -101.50000], 
         [140.50000, -101.50000], 
         [140.50000, -104.50000], 
         [115.50000, -104.50000], 
      ]);
      color("green") translate([0, 0, -0.1]) linear_extrude(height = 1.60000 + 0.2, convexity = 10, twist = 0) polygon( points=[
         [147.00000, -104.50000], 
         [147.00000, -101.50000], 
         [181.00000, -101.50000], 
         [181.00000, -104.50000], 
         [171.50000, -104.50000], 
         [170.50000, -105.50000], 
         [170.50000, -111.00000], 
         [167.50000, -111.00000], 
         [167.50000, -105.50000], 
         [166.50000, -104.50000], 
         [147.00000, -104.50000], 
      ]);
   }
}
module place(){
   translate([160.500000, -135.750000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 45.000000]) C_Radial_D26_L45_P10(); // C21 270µ
   translate([133.500000, -135.750000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 135.000000]) C_Radial_D26_L45_P10(); // C22 270µ
   translate([143.250000, -77.750000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 180.000000]) ESD(); // G*** ESD
   translate([201.000000, -92.500000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 90.000000]) RJ45_LED(); // J1 RJ45_LED
   translate([201.000000, -76.000000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 90.000000]) RJ45_LED(); // J2 RJ45_LED
   translate([201.000000, -59.500000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 90.000000]) RJ45_LED(); // J3 RJ45_LED
   translate([176.000000, -112.750000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 0.000000]) SOLDER_JUMPER(); // JP1 Jumper_NO_Small
   translate([107.750000, -88.750000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 180.000000]) Symbol_OSHW_Logo_SilkScreen(); // LOGO1 OPEN_HARDWARE_1
   translate([147.000000, -144.750000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 180.000000]) Symbol_OSHW_Logo_SilkScreen(); // LOGO1 OPEN_HARDWARE_1
   translate([117.000000, -146.750000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 90.000000]) akl182_2(); // P2 CONN_01X02
   translate([103.000000, -59.500000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 90.000000]) akl182_2(); // P3 CONN_01X02
   translate([126.750000, -67.040000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 0.000000]) Pin_Header_Angled_1x02(); // P4 CONN_01X02
   translate([103.000000, -82.500000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 90.000000]) akl182_6(); // P5 CONN_01X06
   translate([119.000000, -123.750000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 270.000000]) RM5_08_1x2(); // P6 CONN_01X02
   translate([186.500000, -118.750000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 270.000000]) Pin_Header_Straight_1x04(); // P7 CONN_01X04
   translate([119.000000, -106.920000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 270.000000]) RM5_08_1x3(); // P8 CONN_01X03
   translate([108.000000, -56.750000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 0.000000]) akl182_6(); // P9 CONN_01X06
   translate([139.000000, -61.500000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 0.000000]) Socket_Strip_Angled_2x06(); // P10 CONN_02X06
   translate([178.920000, -107.250000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 270.000000]) Pin_Header_Straight_1x04(); // P12 CONN_01X04
   translate([161.000000, -108.500000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 180.000000]) Socket_Strip_Straight_1x04(); // P13 CONN_01X04
   translate([131.000000, -56.750000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 0.000000]) akl182_2(); // P15 CONN_01X02
   translate([191.250000, -137.500000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 0.000000]) Fiducial_1mm_Outer_CopperTop(); // REF** Fiducial_1mm_Dia_2.54mm_Outer_CopperTop
   translate([118.250000, -74.750000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 180.000000]) AC(); // REF** AC
   translate([123.500000, -139.750000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 0.000000]) Fiducial_1mm_Outer_CopperTop(); // REF** Fiducial_1mm_Dia_2.54mm_Outer_CopperTop
   translate([170.000000, -51.750000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 0.000000]) Fiducial_1mm_Outer_CopperTop(); // REF** Fiducial_1mm_Dia_2.54mm_Outer_CopperTop
   translate([187.000000, -140.500000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 180.000000]) Symbol_HighVoltage_Type2_Top_VerySmall(); // REF** Symbol_HighVoltage_Type2_Top_VerySmall
   translate([99.500000, -89.500000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 0.000000]) Fiducial_1mm_Outer_CopperTop(); // REF** Fiducial_1mm_Dia_2.54mm_Outer_CopperTop
   translate([135.500000, -110.250000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 180.000000]) Symbol_HighVoltage_Type2_Top_VerySmall(); // REF** Symbol_HighVoltage_Type2_Top_VerySmall
   translate([187.000000, -130.750000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 180.000000]) Symbol_Danger_Top_Small(); // REF** Symbol_Danger_CopperTop_Small
   translate([178.000000, -128.250000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 0.000000]) Measurement_Point_Round_SMD_Pad_Small(); // T1 testpoint
   translate([173.500000, -128.250000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 0.000000]) Measurement_Point_Round_SMD_Pad_Small(); // T44 testpoint
   translate([175.000000, -128.250000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 0.000000]) Measurement_Point_Round_SMD_Pad_Small(); // T45 testpoint
   translate([176.500000, -128.250000, 0]) rotate([180, 0, 0]) rotate([0, 0, 360 - 0.000000]) Measurement_Point_Round_SMD_Pad_Small(); // T46 testpoint
   translate([154.750000, -52.000000, 1.60000]) rotate([0, 0, 180.000000]) C_0603(); // C1 100n
   translate([170.750000, -121.250000, 1.60000]) rotate([0, 0, 180.000000]) C_0603(); // C2 100n
   translate([178.500000, -145.000000, 1.60000]) rotate([0, 0, 90.000000]) C_1808(); // C3 150n
   translate([193.000000, -124.500000, 1.60000]) rotate([0, 0, 90.000000]) C_0805(); // C4 10µ
   translate([170.750000, -122.750000, 1.60000]) rotate([0, 0, 0.000000]) C_0603(); // C5 18p
   translate([162.000000, -123.750000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C6 18p
   translate([170.750000, -120.000000, 1.60000]) rotate([0, 0, 180.000000]) C_0603(); // C7 100n
   translate([116.250000, -90.500000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C8 2.2µ
   translate([182.750000, -113.500000, 1.60000]) rotate([0, 0, 180.000000]) C_0603(); // C9 100n
   translate([169.000000, -127.750000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C10 100n
   translate([184.750000, -126.750000, 1.60000]) rotate([0, 0, 0.000000]) C_0603(); // C11 18p
   translate([168.750000, -89.750000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C12 100n
   translate([168.750000, -73.250000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C13 100n
   translate([168.000000, -117.750000, 1.60000]) rotate([0, 0, 90.000000]) C_0805(); // C14 10µ
   translate([193.750000, -128.750000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C15 100n
   translate([157.000000, -71.250000, 1.60000]) rotate([0, 0, 0.000000]) C_0603(); // C16 100n
   translate([192.750000, -53.500000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C17 100n
   translate([120.500000, -90.500000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C18 2.2µ
   translate([163.500000, -108.250000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C19 100n
   translate([175.500000, -131.250000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C20 18p
   translate([174.250000, -131.250000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C23 18p
   translate([165.250000, -86.250000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C24 18p
   translate([165.250000, -69.750000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C25 18p
   translate([163.500000, -96.000000, 1.60000]) rotate([0, 0, 180.000000]) C_0603(); // C26 18p
   translate([163.500000, -79.500000, 1.60000]) rotate([0, 0, 180.000000]) C_0603(); // C27 18p
   translate([150.250000, -136.000000, 1.60000]) rotate([0, 0, 90.000000]) C_1808(); // C28 150n
   translate([132.500000, -82.500000, 1.60000]) rotate([0, 0, 0.000000]) C_0603(); // C29 100n
   translate([174.500000, -108.000000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C30 100n
   translate([127.750000, -77.000000, 1.60000]) rotate([0, 0, 0.000000]) C_0603(); // C31 18p
   translate([130.500000, -80.250000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C32 18p
   translate([176.750000, -131.250000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C33 18p
   translate([147.000000, -136.000000, 1.60000]) rotate([0, 0, 90.000000]) C_1808(); // C34 150n
   translate([191.250000, -124.500000, 1.60000]) rotate([0, 0, 90.000000]) C_0805(); // C35 10µ
   translate([161.750000, -69.750000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C36 100n
   translate([161.750000, -86.250000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C37 100n
   translate([143.750000, -136.000000, 1.60000]) rotate([0, 0, 90.000000]) C_1808(); // C38 150n
   translate([184.750000, -128.000000, 1.60000]) rotate([0, 0, 0.000000]) C_0603(); // C39 18p
   translate([196.450000, -141.500000, 1.60000]) rotate([0, 0, 0.000000]) C_0603(); // C40 2.2µ
   translate([185.000000, -140.250000, 1.60000]) rotate([0, 0, 0.000000]) C_0603(); // C41 100n
   translate([129.250000, -117.750000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C42 2.2µ
   translate([134.250000, -117.750000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C43 2.2µ
   translate([139.250000, -117.750000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C44 2.2µ
   translate([178.000000, -131.250000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C45 18p
   translate([138.000000, -92.500000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C46 1n
   translate([140.500000, -92.500000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C47 1n
   translate([141.750000, -92.500000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C48 1n
   translate([139.250000, -92.500000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C49 1n
   translate([195.250000, -125.000000, 1.60000]) rotate([0, 0, 0.000000]) C_0603(); // C50 2.2µ
   translate([184.500000, -137.250000, 1.60000]) rotate([0, 0, 0.000000]) C_0805(); // C51 10µ
   translate([129.750000, -85.250000, 1.60000]) rotate([0, 0, 0.000000]) C_0603(); // C52 1n
   translate([182.750000, -62.250000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C53 100n
   translate([182.750000, -56.750000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C54 100n
   translate([171.250000, -57.750000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C55 100n
   translate([182.750000, -51.250000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C56 100n
   translate([171.500000, -127.750000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C57 18p
   translate([196.500000, -133.000000, 1.60000]) rotate([0, 0, 0.000000]) C_0603(); // C58 100n
   translate([129.750000, -86.500000, 1.60000]) rotate([0, 0, 0.000000]) C_0603(); // C59 1n
   translate([195.250000, -126.250000, 1.60000]) rotate([0, 0, 0.000000]) C_0603(); // C60 100n
   translate([147.500000, -55.500000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C61 100n
   translate([115.750000, -87.500000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C62 2.2µ
   translate([164.750000, -117.750000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C63 100n
   translate([132.500000, -89.250000, 1.60000]) rotate([0, 0, 180.000000]) C_0603(); // C64 1n
   translate([132.500000, -86.500000, 1.60000]) rotate([0, 0, 0.000000]) C_0603(); // C65 2.2µ
   translate([138.000000, -55.500000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C66 100n
   translate([129.750000, -90.500000, 1.60000]) rotate([0, 0, 0.000000]) C_0603(); // C67 100n
   translate([196.000000, -143.000000, 1.60000]) rotate([0, 0, 0.000000]) C_0805(); // C68 10µ
   translate([196.000000, -131.500000, 1.60000]) rotate([0, 0, 0.000000]) C_0805(); // C69 10µ
   translate([196.500000, -134.250000, 1.60000]) rotate([0, 0, 0.000000]) C_0603(); // C70 2.2µ
   translate([182.750000, -95.250000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C71 100n
   translate([182.750000, -78.750000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C72 100n
   translate([182.750000, -89.750000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C73 100n
   translate([182.750000, -73.250000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C74 100n
   translate([182.750000, -67.750000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C75 100n
   translate([182.750000, -84.250000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C76 100n
   translate([132.500000, -79.500000, 1.60000]) rotate([0, 0, 0.000000]) C_0603(); // C77 100n
   translate([180.500000, -131.450000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C78 100n
   translate([184.750000, -121.250000, 1.60000]) rotate([0, 0, 180.000000]) C_0603(); // C79 100n
   translate([132.500000, -83.750000, 1.60000]) rotate([0, 0, 0.000000]) C_0603(); // C80 100n
   translate([132.500000, -90.500000, 1.60000]) rotate([0, 0, 180.000000]) C_0603(); // C81 1n
   translate([175.000000, -117.200000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C82 100n
   translate([170.750000, -125.750000, 1.60000]) rotate([0, 0, 0.000000]) C_0603(); // C83 100n
   translate([136.750000, -92.500000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C84 100n
   translate([149.250000, -91.500000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C85 100n
   translate([154.000000, -74.500000, 1.60000]) rotate([0, 0, 180.000000]) C_0603(); // C86 100n
   translate([136.500000, -70.500000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C87 100n
   translate([148.000000, -91.500000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C88 2.2µ
   translate([132.500000, -77.250000, 1.60000]) rotate([0, 0, 0.000000]) C_0603(); // C89 100n
   translate([154.000000, -76.000000, 1.60000]) rotate([0, 0, 0.000000]) C_0603(); // C90 2.2µ
   translate([99.500000, -83.500000, 1.60000]) rotate([0, 0, 180.000000]) C_0603(); // C91 100n
   translate([140.500000, -136.000000, 1.60000]) rotate([0, 0, 90.000000]) C_1808(); // C92 150n
   translate([153.500000, -136.000000, 1.60000]) rotate([0, 0, 90.000000]) C_1808(); // C93 150n
   translate([99.500000, -76.500000, 1.60000]) rotate([0, 0, 180.000000]) C_0603(); // C94 100n
   translate([99.500000, -69.500000, 1.60000]) rotate([0, 0, 180.000000]) C_0603(); // C95 100n
   translate([115.000000, -90.500000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C96 100n
   translate([102.750000, -61.750000, 1.60000]) rotate([0, 0, 180.000000]) C_0603(); // C97 100n
   translate([122.750000, -65.750000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C98 100n
   translate([117.500000, -90.500000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C99 100n
   translate([122.000000, -53.750000, 1.60000]) rotate([0, 0, 0.000000]) C_0603(); // C100 100n
   translate([117.250000, -87.500000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C101 2.2µ
   translate([114.250000, -70.500000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C102 2.2µ
   translate([114.250000, -82.000000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C103 100n
   translate([114.250000, -73.250000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C104 100n
   translate([116.250000, -82.250000, 1.60000]) rotate([0, 0, 180.000000]) C_0603(); // C105 100n
   translate([116.250000, -70.750000, 1.60000]) rotate([0, 0, 180.000000]) C_0603(); // C106 100n
   translate([119.250000, -83.750000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C107 100n
   translate([119.250000, -72.250000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C108 100n
   translate([120.500000, -81.500000, 1.60000]) rotate([0, 0, 0.000000]) C_0805(); // C109 10µ
   translate([120.500000, -68.250000, 1.60000]) rotate([0, 0, 0.000000]) C_0805(); // C110 10µ
   translate([120.500000, -79.750000, 1.60000]) rotate([0, 0, 0.000000]) C_0805(); // C111 10µ
   translate([188.750000, -51.250000, 1.60000]) rotate([0, 0, 0.000000]) C_0603(); // C112 100n
   translate([170.250000, -76.000000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C113 100n
   translate([192.000000, -70.000000, 1.60000]) rotate([0, 0, 180.000000]) C_0603(); // C114 100n
   translate([188.750000, -67.750000, 1.60000]) rotate([0, 0, 180.000000]) C_0603(); // C115 100n
   translate([170.250000, -92.500000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C116 100n
   translate([192.000000, -86.500000, 1.60000]) rotate([0, 0, 180.000000]) C_0603(); // C117 100n
   translate([188.750000, -84.250000, 1.60000]) rotate([0, 0, 180.000000]) C_0603(); // C118 100n
   translate([132.500000, -85.250000, 1.60000]) rotate([0, 0, 0.000000]) C_0603(); // C119 100n
   translate([111.750000, -89.000000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C120 100n
   translate([109.750000, -88.750000, 1.60000]) rotate([0, 0, 0.000000]) C_0603(); // C121 100n
   translate([106.750000, -87.250000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C122 100n
   translate([105.500000, -89.500000, 1.60000]) rotate([0, 0, 180.000000]) C_0805(); // C123 10µ
   translate([105.500000, -91.250000, 1.60000]) rotate([0, 0, 180.000000]) C_0805(); // C124 10µ
   translate([129.750000, -88.000000, 1.60000]) rotate([0, 0, 0.000000]) C_0603(); // C125 100n
   translate([129.750000, -89.250000, 1.60000]) rotate([0, 0, 0.000000]) C_0603(); // C126 100n
   translate([184.800000, -125.500000, 1.60000]) rotate([0, 0, 180.000000]) C_0603(); // C127 100n
   translate([187.000000, -115.750000, 1.60000]) rotate([0, 0, 0.000000]) C_0603(); // C128 100n
   translate([166.250000, -117.750000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C129 2.2µ
   translate([111.500000, -53.750000, 1.60000]) rotate([0, 0, 0.000000]) C_0603(); // C130 100n
   translate([119.000000, -90.250000, 1.60000]) rotate([0, 0, 90.000000]) C_0805(); // C131 10µ
   translate([120.500000, -70.000000, 1.60000]) rotate([0, 0, 0.000000]) C_0805(); // C132 10µ
   translate([111.750000, -85.750000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C133 2.2µ
   translate([105.500000, -87.250000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C134 2.2µ
   translate([120.500000, -83.750000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C135 2.2µ
   translate([120.500000, -72.250000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C136 2.2µ
   translate([114.250000, -84.750000, 1.60000]) rotate([0, 0, 270.000000]) C_0603(); // C137 2.2µ
   translate([120.750000, -141.750000, 1.60000]) rotate([0, 0, 0.000000]) C_0603(); // C138 100n
   translate([118.750000, -61.000000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C139 2.2µ
   translate([120.250000, -61.000000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C140 2.2µ
   translate([114.250000, -87.500000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C141 2.2µ
   translate([121.750000, -61.000000, 1.60000]) rotate([0, 0, 90.000000]) C_0603(); // C142 2.2µ
   translate([196.750000, -117.750000, 1.60000]) rotate([0, 0, 270.000000]) LED_0805(); // D1 red
   translate([106.500000, -80.750000, 1.60000]) rotate([0, 0, 90.000000]) SMA_Standard(); // D2 ES1J R2
   translate([106.500000, -73.750000, 1.60000]) rotate([0, 0, 90.000000]) SMA_Standard(); // D3 ES1J R2
   translate([99.000000, -80.750000, 1.60000]) rotate([0, 0, 90.000000]) LED_0805(); // D4 green
   translate([106.500000, -66.750000, 1.60000]) rotate([0, 0, 90.000000]) SMA_Standard(); // D5 ES1J R2
   translate([188.250000, -126.250000, 1.60000]) rotate([0, 0, 90.000000]) SMA_Standard(); // D6 SS34A
   translate([130.500000, -65.750000, 1.60000]) rotate([0, 0, 270.000000]) SMA_Standard(); // D7 ES1J R2
   translate([112.750000, -126.250000, 1.60000]) rotate([0, 0, 90.000000]) LED_0805(); // D8 green
   translate([118.250000, -76.750000, 1.60000]) rotate([0, 0, 0.000000]) SMA_Standard(); // D9 SS34A
   translate([192.250000, -146.250000, 1.60000]) rotate([0, 0, 0.000000]) SMA_Standard(); // D10 ES1J R2
   translate([184.250000, -132.750000, 1.60000]) rotate([0, 0, 90.000000]) SMA_Standard(); // D11 ES1J R2
   translate([118.250000, -65.250000, 1.60000]) rotate([0, 0, 0.000000]) SMA_Standard(); // D12 SS34A
   translate([107.750000, -94.250000, 1.60000]) rotate([0, 0, 180.000000]) SMA_Standard(); // D13 SS34A
   translate([99.000000, -73.750000, 1.60000]) rotate([0, 0, 90.000000]) LED_0805(); // D14 green
   translate([99.000000, -66.750000, 1.60000]) rotate([0, 0, 90.000000]) LED_0805(); // D15 green
   translate([150.500000, -50.750000, 1.60000]) rotate([0, 0, 0.000000]) LED_0805(); // D16 red
   translate([145.250000, -50.750000, 1.60000]) rotate([0, 0, 0.000000]) LED_0805(); // D17 yellow
   translate([140.000000, -50.750000, 1.60000]) rotate([0, 0, 0.000000]) LED_0805(); // D18 green
   translate([111.500000, -50.750000, 1.60000]) rotate([0, 0, 0.000000]) LED_0805(); // D19 green
   translate([122.000000, -50.750000, 1.60000]) rotate([0, 0, 0.000000]) LED_0805(); // D20 green
   translate([166.750000, -54.000000, 1.60000]) rotate([0, 0, 270.000000]) SMA_Standard(); // D21 D
   translate([101.750000, -52.000000, 1.60000]) rotate([0, 0, 0.000000]) SMA_Standard(); // D22 SS34A
   translate([108.500000, -61.250000, 1.60000]) rotate([0, 0, 180.000000]) SMA_Standard(); // D23 SS34A
   translate([99.000000, -57.750000, 1.60000]) rotate([0, 0, 90.000000]) LED_0805(); // D24 green
   translate([196.750000, -73.750000, 1.60000]) rotate([0, 0, 270.000000]) SOLDER_JUMPER_3_NC(); // JP2 JUMPER3_NC
   translate([124.250000, -65.000000, 1.60000]) rotate([0, 0, 90.000000]) SOLDER_JUMPER_3_NC(); // JP3 JUMPER3_NC
   translate([113.250000, -92.000000, 1.60000]) rotate([0, 0, 90.000000]) SOLDER_JUMPER(); // JP4 Jumper_NO_Small
   translate([196.750000, -90.250000, 1.60000]) rotate([0, 0, 270.000000]) SOLDER_JUMPER_3_NC(); // JP5 JUMPER3_NC
   translate([113.250000, -96.000000, 1.60000]) rotate([0, 0, 270.000000]) SOLDER_JUMPER_3_NC(); // JP6 JUMPER3_NC
   translate([140.000000, -65.000000, 1.60000]) rotate([0, 0, 270.000000]) SOLDER_JUMPER(); // JP9 Jumper_NO_Small
   translate([170.250000, -127.750000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // L1 220r 700mA
   translate([191.250000, -137.500000, 1.60000]) rotate([0, 0, 270.000000]) NPI31W(); // L2 1m 250mA
   translate([132.500000, -87.750000, 1.60000]) rotate([0, 0, 180.000000]) R_0603(); // L3 220r 700mA
   translate([191.750000, -128.250000, 1.60000]) rotate([0, 0, 90.000000]) SMD_INDUCTOR_32x25(); // L4 4.7µH 1.5A
   translate([116.750000, -80.200000, 1.60000]) rotate([0, 0, 0.000000]) SMD_INDUCTOR_32x25(); // L5 4.7µH 1.5A
   translate([116.750000, -68.750000, 1.60000]) rotate([0, 0, 0.000000]) SMD_INDUCTOR_32x25(); // L6 4.7µH 1.5A
   translate([184.250000, -51.250000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // L7 220r 700mA
   translate([170.250000, -78.750000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // L8 220r 700mA
   translate([184.250000, -67.750000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // L9 220r 700mA
   translate([170.250000, -95.250000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // L10 220r 700mA
   translate([184.250000, -84.250000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // L11 220r 700mA
   translate([109.250000, -90.750000, 1.60000]) rotate([0, 0, 180.000000]) SMD_INDUCTOR_32x25(); // L12 4.7µH 1.5A
   translate([160.500000, -51.750000, 1.60000]) rotate([0, 0, 180.000000]) USB_Micro_B_10103594_0001LF(); // P1 USB_OTG
   translate([195.750000, -111.000000, 1.60000]) rotate([0, 0, 90.000000]) USB_Micro_B_10103594_0001LF(); // P11 USB_OTG
   translate([147.000000, -99.750000, 1.60000]) rotate([0, 0, 270.000000]) Pin_Header_Angled_1x04(); // P14 CONN_01X04
   translate([110.250000, -79.750000, 1.60000]) rotate([0, 0, 0.000000]) SOT_23(); // Q1 IRLML6344
   translate([110.250000, -72.750000, 1.60000]) rotate([0, 0, 0.000000]) SOT_23(); // Q2 IRLML6344
   translate([110.250000, -65.750000, 1.60000]) rotate([0, 0, 0.000000]) SOT_23(); // Q3 IRLML6344
   translate([134.250000, -66.750000, 1.60000]) rotate([0, 0, 180.000000]) SOT_23(); // Q4 IRLML6344
   translate([154.750000, -50.750000, 1.60000]) rotate([0, 0, 180.000000]) R_0603(); // R1 120
   translate([177.000000, -117.200000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R2 1k
   translate([188.750000, -82.750000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R3 470
   translate([188.750000, -99.500000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R4 470
   translate([188.750000, -88.000000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R5 470
   translate([188.750000, -71.500000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R6 470
   translate([120.750000, -143.250000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R7 10k
   translate([194.500000, -116.750000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R8 470
   translate([110.000000, -83.750000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R9 22
   translate([110.000000, -76.750000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R10 22
   translate([110.000000, -69.750000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R11 22
   translate([110.000000, -82.250000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R12 1k
   translate([110.000000, -75.250000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R13 1k
   translate([110.000000, -68.250000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R14 1k
   translate([192.500000, -122.000000, 1.60000]) rotate([0, 0, 180.000000]) R_0603(); // R15 1k
   translate([182.750000, -139.500000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // R16 1k
   translate([188.750000, -66.250000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R17 470
   translate([188.750000, -54.750000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R18 470
   translate([196.000000, -122.750000, 1.60000]) rotate([0, 0, 180.000000]) R_0603(); // R19 15k
   translate([99.500000, -78.000000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R20 3.9k
   translate([196.000000, -121.500000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R21 50k
   translate([99.500000, -71.000000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R22 3.9k
   translate([168.750000, -92.500000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R23 120
   translate([168.750000, -76.000000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R24 120
   translate([170.250000, -70.500000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R25 120
   translate([170.250000, -87.000000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R26 120
   translate([141.250000, -123.000000, 1.60000]) rotate([0, 0, 270.000000]) R_1206(); // R27 250k
   translate([141.250000, -127.750000, 1.60000]) rotate([0, 0, 270.000000]) R_1206(); // R28 250k
   translate([139.500000, -130.250000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // R29 3.9k
   translate([112.750000, -132.250000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R30 1k
   translate([191.250000, -53.500000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // R31 120
   translate([136.250000, -123.000000, 1.60000]) rotate([0, 0, 270.000000]) R_1206(); // R32 250k
   translate([136.250000, -127.750000, 1.60000]) rotate([0, 0, 270.000000]) R_1206(); // R33 250k
   translate([138.000000, -130.250000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // R34 3.9k
   translate([121.750000, -84.750000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R35 10k
   translate([167.500000, -70.500000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R36 10k
   translate([167.500000, -87.000000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R37 10k
   translate([167.500000, -85.500000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R38 10k
   translate([167.500000, -69.000000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R39 10k
   translate([134.250000, -62.750000, 1.60000]) rotate([0, 0, 180.000000]) R_0603(); // R40 22
   translate([166.500000, -96.000000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R41 10k
   translate([166.500000, -79.500000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R42 10k
   translate([164.500000, -97.500000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R43 10k
   translate([164.500000, -81.000000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R44 10k
   translate([134.250000, -64.250000, 1.60000]) rotate([0, 0, 180.000000]) R_0603(); // R45 1k
   translate([164.250000, -129.000000, 1.60000]) rotate([0, 0, 180.000000]) R_0603(); // R46 470
   translate([167.250000, -76.000000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // R47 15k
   translate([167.250000, -92.500000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // R48 15k
   translate([167.250000, -89.750000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R49 15k
   translate([167.250000, -73.250000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R50 15k
   translate([131.250000, -123.000000, 1.60000]) rotate([0, 0, 270.000000]) R_1206(); // R51 250k
   translate([131.250000, -127.750000, 1.60000]) rotate([0, 0, 270.000000]) R_1206(); // R52 250k
   translate([133.000000, -130.250000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // R53 3.9k
   translate([161.750000, -97.500000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R54 15k
   translate([161.750000, -81.000000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R55 15k
   translate([163.250000, -69.750000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R56 15k
   translate([163.250000, -86.250000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R57 15k
   translate([167.000000, -129.000000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R58 15k
   translate([121.750000, -73.250000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R59 3.9k
   translate([123.000000, -84.750000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // R60 50k
   translate([140.000000, -68.000000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // R61 1k
   translate([195.750000, -63.000000, 1.60000]) rotate([0, 0, 180.000000]) R_0603(); // R62 10k
   translate([182.750000, -65.000000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R63 1k
   translate([188.750000, -62.000000, 1.60000]) rotate([0, 0, 180.000000]) R_0603(); // R64 10k
   translate([195.750000, -61.000000, 1.60000]) rotate([0, 0, 180.000000]) R_0603(); // R65 10k
   translate([182.750000, -59.500000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R66 1k
   translate([188.750000, -58.000000, 1.60000]) rotate([0, 0, 180.000000]) R_0603(); // R67 10k
   translate([195.750000, -59.000000, 1.60000]) rotate([0, 0, 180.000000]) R_0603(); // R68 10k
   translate([171.250000, -60.500000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R69 1k
   translate([188.750000, -60.000000, 1.60000]) rotate([0, 0, 180.000000]) R_0603(); // R70 10k
   translate([195.750000, -57.000000, 1.60000]) rotate([0, 0, 180.000000]) R_0603(); // R71 10k
   translate([182.750000, -54.000000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R72 1k
   translate([188.750000, -56.000000, 1.60000]) rotate([0, 0, 180.000000]) R_0603(); // R73 10k
   translate([99.500000, -64.000000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R74 3.9k
   translate([112.750000, -129.500000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R75 1k
   translate([148.000000, -51.250000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // R76 470
   translate([166.250000, -145.250000, 1.60000]) rotate([0, 0, 90.000000]) R_1206(); // R77 250k
   translate([166.250000, -140.500000, 1.60000]) rotate([0, 0, 90.000000]) R_1206(); // R78 250k
   translate([166.250000, -136.000000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R79 3.9k
   translate([148.000000, -125.750000, 1.60000]) rotate([0, 0, 270.000000]) R_2512(); // R80 0.004
   translate([152.000000, -125.750000, 1.60000]) rotate([0, 0, 270.000000]) R_2512(); // R81 0.004
   translate([156.000000, -125.750000, 1.60000]) rotate([0, 0, 270.000000]) R_2512(); // R82 0.004
   translate([142.750000, -51.250000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // R83 470
   translate([164.250000, -127.750000, 1.60000]) rotate([0, 0, 180.000000]) R_0603(); // R84 470
   translate([137.500000, -51.250000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // R85 470
   translate([160.250000, -79.000000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // R86 22
   translate([160.250000, -95.500000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // R87 22
   translate([160.250000, -87.250000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R88 22
   translate([160.250000, -70.750000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R89 22
   translate([167.000000, -127.750000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R90 15k
   translate([185.000000, -139.000000, 1.60000]) rotate([0, 0, 180.000000]) R_0603(); // R91 1k
   translate([181.250000, -139.500000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R92 15k
   translate([160.250000, -76.250000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R93 470
   translate([160.250000, -92.750000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R94 470
   translate([160.250000, -73.500000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // R95 470
   translate([160.250000, -90.000000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // R96 470
   translate([123.000000, -73.250000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // R97 50k
   translate([113.750000, -60.250000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R98 10k
   translate([116.500000, -60.250000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R99 1k
   translate([164.250000, -126.500000, 1.60000]) rotate([0, 0, 180.000000]) R_0603(); // R100 470
   translate([173.250000, -66.500000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // R101 1k
   translate([173.250000, -61.000000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // R102 1k
   translate([161.750000, -62.000000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // R103 1k
   translate([173.250000, -55.500000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // R104 1k
   translate([113.750000, -61.750000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R105 1k
   translate([124.250000, -60.250000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R106 10k
   translate([167.000000, -126.500000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R107 15k
   translate([127.000000, -60.250000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R108 1k
   translate([182.750000, -81.500000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R109 120
   translate([182.750000, -98.000000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R110 120
   translate([182.750000, -76.000000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R111 120
   translate([182.750000, -92.500000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R112 120
   translate([182.750000, -87.000000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R113 120
   translate([182.750000, -70.500000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R114 120
   translate([168.000000, -120.500000, 1.60000]) rotate([0, 0, 180.000000]) R_0603(); // R115 10k
   translate([119.250000, -87.750000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R116 10k
   translate([122.000000, -87.750000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R117 1k
   translate([170.750000, -124.250000, 1.60000]) rotate([0, 0, 180.000000]) R_0603(); // R118 1k
   translate([124.250000, -61.750000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R119 1k
   translate([111.500000, -52.500000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R120 470
   translate([122.500000, -93.250000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R121 1k
   translate([122.500000, -90.500000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R122 1k
   translate([173.250000, -83.000000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // R123 1k
   translate([172.500000, -98.750000, 1.60000]) rotate([0, 0, 180.000000]) R_0603(); // R124 1k
   translate([173.250000, -77.500000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // R125 1k
   translate([173.250000, -94.000000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // R126 1k
   translate([173.250000, -88.500000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // R127 1k
   translate([173.250000, -72.000000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // R128 1k
   translate([179.200000, -118.000000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R129 1k
   translate([168.750000, -78.750000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R130 120
   translate([168.750000, -95.250000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R131 120
   translate([104.250000, -86.250000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // R132 10k
   translate([103.000000, -86.250000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R133 50k
   translate([122.000000, -52.250000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R134 470
   translate([195.750000, -76.750000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R135 10k
   translate([195.750000, -78.000000, 1.60000]) rotate([0, 0, 180.000000]) R_0603(); // R136 1k
   translate([193.750000, -72.000000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R137 10k
   translate([195.750000, -93.250000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R138 10k
   translate([195.750000, -94.500000, 1.60000]) rotate([0, 0, 180.000000]) R_0603(); // R139 1k
   translate([193.750000, -88.500000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R140 10k
   translate([120.750000, -145.000000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R141 50k
   translate([120.750000, -146.750000, 1.60000]) rotate([0, 0, 180.000000]) R_0603(); // R142 10k
   translate([181.250000, -142.250000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R143 1.5k
   translate([103.000000, -89.000000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R144 1k
   translate([123.000000, -82.000000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // R145 1k
   translate([123.000000, -70.500000, 1.60000]) rotate([0, 0, 270.000000]) R_0603(); // R146 1k
   translate([170.250000, -73.250000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R147 22
   translate([170.250000, -89.750000, 1.60000]) rotate([0, 0, 90.000000]) R_0603(); // R148 22
   translate([99.750000, -61.250000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R149 3.9k
   translate([189.750000, -109.500000, 1.60000]) rotate([0, 0, 180.000000]) R_0603(); // R150 1.5k
   translate([189.750000, -112.000000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R151 22
   translate([189.750000, -110.750000, 1.60000]) rotate([0, 0, 0.000000]) R_0603(); // R152 22
   translate([132.500000, -81.000000, 1.60000]) rotate([0, 0, 180.000000]) R_0603(); // R153 1k
   translate([191.250000, -137.500000, 1.60000]) rotate([0, 0, 0.000000]) Fiducial_1mm_Outer_CopperTop(); // REF** Fiducial_1mm_Dia_2.54mm_Outer_CopperTop
   translate([123.500000, -139.750000, 1.60000]) rotate([0, 0, 0.000000]) Fiducial_1mm_Outer_CopperTop(); // REF** Fiducial_1mm_Dia_2.54mm_Outer_CopperTop
   translate([135.500000, -110.250000, 1.60000]) rotate([0, 0, 0.000000]) Symbol_HighVoltage_Type2_Top_VerySmall(); // REF** Symbol_HighVoltage_Type2_Top_VerySmall
   translate([99.500000, -89.500000, 1.60000]) rotate([0, 0, 0.000000]) Fiducial_1mm_Outer_CopperTop(); // REF** Fiducial_1mm_Dia_2.54mm_Outer_CopperTop
   translate([170.000000, -51.750000, 1.60000]) rotate([0, 0, 0.000000]) Fiducial_1mm_Outer_CopperTop(); // REF** Fiducial_1mm_Dia_2.54mm_Outer_CopperTop
   translate([157.000000, -68.750000, 1.60000]) rotate([0, 0, 270.000000]) SOT_23_6(); // U1 USBLC6-4SC6
   translate([118.000000, -96.750000, 1.60000]) rotate([0, 0, 180.000000]) SOT_223(); // U2 zldo1117
   translate([169.000000, -108.000000, 1.60000]) rotate([0, 0, 270.000000]) SOIC_8_N(); // U3 SI8621
   translate([196.000000, -128.650000, 1.60000]) rotate([0, 0, 90.000000]) SOT_23_6(); // U4 ACT4088
   translate([184.750000, -144.500000, 1.60000]) rotate([0, 0, 180.000000]) SOIC_7(); // U5 lnk304D
   translate([163.750000, -75.000000, 1.60000]) rotate([0, 0, 0.000000]) SOIC_8_N(); // U6 LM358
   translate([163.750000, -91.500000, 1.60000]) rotate([0, 0, 0.000000]) SOIC_8_N(); // U7 LM358
   translate([178.000000, -65.000000, 1.60000]) rotate([0, 0, 270.000000]) SOIC_8_N(); // U8 SN65176B
   translate([178.000000, -59.500000, 1.60000]) rotate([0, 0, 270.000000]) SOIC_8_N(); // U9 SN65176B
   translate([166.500000, -60.500000, 1.60000]) rotate([0, 0, 270.000000]) SOIC_8_N(); // U10 SN65176B
   translate([178.000000, -54.000000, 1.60000]) rotate([0, 0, 270.000000]) SOIC_8_N(); // U11 SN65176B
   translate([147.000000, -136.750000, 1.60000]) rotate([0, 0, 180.000000]) IRAM256(); // U12 IRAM256a
   translate([116.750000, -84.500000, 1.60000]) rotate([0, 0, 0.000000]) SOT_23_6(); // U13 ACT4088
   translate([178.000000, -81.500000, 1.60000]) rotate([0, 0, 270.000000]) SOIC_8_N(); // U14 SN65176B
   translate([178.000000, -98.000000, 1.60000]) rotate([0, 0, 270.000000]) SOIC_8_N(); // U15 SN65176B
   translate([178.000000, -92.500000, 1.60000]) rotate([0, 0, 270.000000]) SOIC_8_N(); // U16 SN65176B
   translate([178.000000, -76.000000, 1.60000]) rotate([0, 0, 270.000000]) SOIC_8_N(); // U17 SN65176B
   translate([178.000000, -70.500000, 1.60000]) rotate([0, 0, 270.000000]) SOIC_8_N(); // U18 SN65176B
   translate([178.000000, -87.000000, 1.60000]) rotate([0, 0, 270.000000]) SOIC_8_N(); // U19 SN65176B
   translate([145.250000, -56.000000, 1.60000]) rotate([0, 0, 90.000000]) SOT_23_6(); // U20 USBLC6-4SC6
   translate([182.750000, -111.000000, 1.60000]) rotate([0, 0, 270.000000]) SOT_23_6(); // U21 USBLC6-4SC6
   translate([140.250000, -56.000000, 1.60000]) rotate([0, 0, 90.000000]) SOT_23_6(); // U22 USBLC6-4SC6
   translate([126.500000, -87.250000, 1.60000]) rotate([0, 0, 180.000000]) SOT_23_6(); // U23 USBLC6-4SC6
   translate([177.750000, -124.250000, 1.60000]) rotate([0, 0, 0.000000]) LQFP_48_7x7mm_Pitch0_5mm(); // U25 STM32F303CBTx
   translate([143.250000, -80.750000, 1.60000]) rotate([0, 0, 0.000000]) LQFP_100_14x14mm_Pitch0_5mm(); // U26 STM32F405VG
   translate([116.750000, -73.000000, 1.60000]) rotate([0, 0, 0.000000]) SOT_23_6(); // U27 ACT4088
   translate([109.250000, -86.500000, 1.60000]) rotate([0, 0, 180.000000]) SOT_23_6(); // U28 ACT4088
   translate([187.000000, -113.250000, 1.60000]) rotate([0, 0, 270.000000]) SOT_23_6(); // U29 USBLC6-4SC6
   translate([105.250000, -57.750000, 1.60000]) rotate([0, 0, 90.000000]) R_0805(); // VR1 24V
   translate([166.000000, -123.750000, 1.60000]) rotate([0, 0, 180.000000]) Crystal_SMD_0603_4Pads(); // Y1 8M
   translate([127.750000, -81.000000, 1.60000]) rotate([0, 0, 270.000000]) Crystal_SMD_0603_4Pads(); // Y2 8M
}
